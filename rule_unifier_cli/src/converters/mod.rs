// src/converters/mod.rs

use crate::universal_rule::UniversalRule;
use anyhow::Result;
use std::path::Path;

/// A trait for types that can convert a list of UniversalRules
/// into a specific agent's rule format and write them to disk.
pub trait RuleConverter {
    /// Generates agent-specific rule files from a slice of UniversalRules.
    ///
    /// # Arguments
    /// * `rules` - A slice of `UniversalRule` to be converted.
    /// * `output_dir` - The directory where the generated rule files should be saved.
    ///
    /// # Returns
    /// A `Result` indicating success or failure.
    fn generate_rules(&self, rules: &[UniversalRule], output_dir: &Path) -> Result<()>;

    /// Provides a descriptive name for the output generated by this converter.
    /// This is used for user-facing messages.
    /// For example, "Cursor rules (.cursor/rules)" or "Claude.md".
    fn get_output_description(&self, output_dir: &Path) -> String;
}

pub mod cursor;
pub mod windsurf;
pub mod claude;
